// Code generated for Igorezka service
// Â© Igorezka 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Igorezka/rocket-factory/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, uuid
func (_m *OrderService) Cancel(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderService_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type OrderService_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderService_Expecter) Cancel(ctx interface{}, uuid interface{}) *OrderService_Cancel_Call {
	return &OrderService_Cancel_Call{Call: _e.mock.On("Cancel", ctx, uuid)}
}

func (_c *OrderService_Cancel_Call) Run(run func(ctx context.Context, uuid string)) *OrderService_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_Cancel_Call) Return(_a0 error) *OrderService_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderService_Cancel_Call) RunAndReturn(run func(context.Context, string) error) *OrderService_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, orderCreate
func (_m *OrderService) Create(ctx context.Context, orderCreate model.OrderCreate) (string, float64, error) {
	ret := _m.Called(ctx, orderCreate)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreate) (string, float64, error)); ok {
		return rf(ctx, orderCreate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreate) string); ok {
		r0 = rf(ctx, orderCreate)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderCreate) float64); ok {
		r1 = rf(ctx, orderCreate)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.OrderCreate) error); ok {
		r2 = rf(ctx, orderCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrderService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - orderCreate model.OrderCreate
func (_e *OrderService_Expecter) Create(ctx interface{}, orderCreate interface{}) *OrderService_Create_Call {
	return &OrderService_Create_Call{Call: _e.mock.On("Create", ctx, orderCreate)}
}

func (_c *OrderService_Create_Call) Run(run func(ctx context.Context, orderCreate model.OrderCreate)) *OrderService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderCreate))
	})
	return _c
}

func (_c *OrderService_Create_Call) Return(_a0 string, _a1 float64, _a2 error) *OrderService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrderService_Create_Call) RunAndReturn(run func(context.Context, model.OrderCreate) (string, float64, error)) *OrderService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *OrderService) Get(ctx context.Context, uuid string) (model.Order, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderService_Expecter) Get(ctx interface{}, uuid interface{}) *OrderService_Get_Call {
	return &OrderService_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *OrderService_Get_Call) Run(run func(ctx context.Context, uuid string)) *OrderService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_Get_Call) Return(_a0 model.Order, _a1 error) *OrderService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_Get_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, orderPay
func (_m *OrderService) Pay(ctx context.Context, orderPay model.OrderPay) (string, error) {
	ret := _m.Called(ctx, orderPay)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderPay) (string, error)); ok {
		return rf(ctx, orderPay)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderPay) string); ok {
		r0 = rf(ctx, orderPay)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderPay) error); ok {
		r1 = rf(ctx, orderPay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type OrderService_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - orderPay model.OrderPay
func (_e *OrderService_Expecter) Pay(ctx interface{}, orderPay interface{}) *OrderService_Pay_Call {
	return &OrderService_Pay_Call{Call: _e.mock.On("Pay", ctx, orderPay)}
}

func (_c *OrderService_Pay_Call) Run(run func(ctx context.Context, orderPay model.OrderPay)) *OrderService_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderPay))
	})
	return _c
}

func (_c *OrderService_Pay_Call) Return(_a0 string, _a1 error) *OrderService_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_Pay_Call) RunAndReturn(run func(context.Context, model.OrderPay) (string, error)) *OrderService_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
